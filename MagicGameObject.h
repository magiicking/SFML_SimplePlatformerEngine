#pragma once

#include "pch.h"

using namespace std;

////////////////////////////////////////////////////////////
/// \brief Перечисление возможных флагов объекта.
///
///
////////////////////////////////////////////////////////////
enum class ObjectTypeFlags : uint16_t
{
	////////////////////////////////////////////////////////////
	/// \brief Нужно отрисовывать.
	///
	///
	////////////////////////////////////////////////////////////
	MustBeRendered = 1 << 0,
	////////////////////////////////////////////////////////////
	/// \brief Блокирует видимость.
	///
	///
	////////////////////////////////////////////////////////////
	VisibilityBlocking = 1 << 1,
	////////////////////////////////////////////////////////////
	/// \brief Нужно считать физические столкновения
	/// (с отталкиванием)
	///
	////////////////////////////////////////////////////////////
	PhysicCollision = 1 << 2,
	////////////////////////////////////////////////////////////
	/// \brief Триггер. Проверять пересечение, но
	/// физические силы к нему не применяются.
	///
	////////////////////////////////////////////////////////////
	Trigger = 1 << 3
};

////////////////////////////////////////////////////////////
/// \brief Игровой объект.
///
/// Самый базовый вариант объекта.
/// Надо будет прикрутить к нему возможность анимации,
/// но для начала и так сойдет.
/// 
/// \param Параметр     Заполнить параметры.
///
////////////////////////////////////////////////////////////
class MagicGameObject : public sf::Drawable
{

private:
	////////////////////////////////////////////////////////////
	/// \brief Прямоугольник объекта.
	///
	/// Левый верхний угол - положение в пространстве.
	/// Ширина и высота - размеры.
	/// 
	/// \param Параметр     Заполнить параметры.
	///
	////////////////////////////////////////////////////////////
	sf::FloatRect objectRect;

	////////////////////////////////////////////////////////////
	/// \brief Точка верхнего левого угла.
	///
	////////////////////////////////////////////////////////////
	unique_ptr<sf::Vector2f> topLeft;

	////////////////////////////////////////////////////////////
	/// \brief Точка верхнего правого угла.
	///
	///
	////////////////////////////////////////////////////////////
	unique_ptr<sf::Vector2f> topRight;

	////////////////////////////////////////////////////////////
	/// \brief Точка нижнего левого угла.
	///
	////////////////////////////////////////////////////////////
	unique_ptr<sf::Vector2f> bottomLeft;

	////////////////////////////////////////////////////////////
	/// \brief Точка нижнего правого угла.
	///
	////////////////////////////////////////////////////////////
	unique_ptr<sf::Vector2f> bottomRight;

	////////////////////////////////////////////////////////////
	/// \brief Флаги объекта.
	///
	/// Нужно отрисовывать, блокирует видимость и т.д.
	/// Перечисление ObjectTypeFlags в помощь
	///
	////////////////////////////////////////////////////////////
	uint16_t flags;

	////////////////////////////////////////////////////////////
	/// \brief Порядок отображения.
	/// При отрисовке, объекты должны отрисовываться в этом порядке.
	/// Нужно для отделения фона, обстановки и героев.
	/// 
	///
	////////////////////////////////////////////////////////////
	int zOrder;

	////////////////////////////////////////////////////////////
	/// \brief Массив вершин для отрисовки.
	///
	///
	////////////////////////////////////////////////////////////
	unique_ptr<sf::VertexArray> m_vertices;

	////////////////////////////////////////////////////////////
	/// \brief Указатель на текстуру.
	///
	////////////////////////////////////////////////////////////
	sf::Texture* m_texture;

	////////////////////////////////////////////////////////////
	/// \brief Тиканье.
	///
	/// Определяет, будет ли отрабатываться содержимое функции Tick
	/// 
	/// 
	/// 
	///
	////////////////////////////////////////////////////////////
	bool ticking;

	////////////////////////////////////////////////////////////
	/// \brief Отрисовка.
	/// 
	/// \param target     Куда рисовать.
	/// \param states     Параметры рисования.
	///
	////////////////////////////////////////////////////////////
	void draw(sf::RenderTarget& target, sf::RenderStates states) const override;
	//virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const;
	

public:

	////////////////////////////////////////////////////////////
	/// \brief Конструктор объекта.
	///
	/// Пока принимает только прямоугольник.
	/// 
	/// 
	/// \param _objectRect     Прямоугольник объекта (положение и размер).
	///
	////////////////////////////////////////////////////////////
	MagicGameObject(const sf::FloatRect _objectRect);

	////////////////////////////////////////////////////////////
	/// \brief Получить прямоугольник объекта.
	/// Нужен для проверки пересечений.
	///
	////////////////////////////////////////////////////////////
	sf::FloatRect GetRect() const;

	////////////////////////////////////////////////////////////
	/// \brief Установить положение объекта.
	///
	/// Устанавливается положение верхнего левого угла прямоугольника,
	/// а также смещаются вершины.
	/// 
	/// \param newPosition     Новое положение.
	///
	////////////////////////////////////////////////////////////
	void SetPosition(sf::Vector2f newPosition);

	////////////////////////////////////////////////////////////
	/// \brief Тиканье.
	///
	/// Функция, обрабатывающая "взаимоотношение" объекта со временем:
	/// анимация, таймеры и т.д.
	/// 
	/// \param deltaTime     Количество прошедшего времени.
	///
	////////////////////////////////////////////////////////////
	virtual void Tick(float deltaTime);

	////////////////////////////////////////////////////////////
	/// \brief Получить угловые точки.
	///
	/// Помещает указатели на 4 угловые точки в переданный вектор
	/// 
	/// \param ret_vector     Вектор для заполнения угловыми точками.
	///
	////////////////////////////////////////////////////////////
	void GetCornersPointers(vector<sf::Vector2f*>* const ret_vector);

	////////////////////////////////////////////////////////////
	/// \brief Получить указатель на верхнюю левую точку.
	///
	////////////////////////////////////////////////////////////
	sf::Vector2f* GetTopLeftPoint() const;

	////////////////////////////////////////////////////////////
	/// \brief Получить указатель на верхнюю правую точку.
	///
	////////////////////////////////////////////////////////////
	sf::Vector2f* GetTopRightPoint() const;

	////////////////////////////////////////////////////////////
	/// \brief Получить указатель на нижнюю левую точку.
	///
	////////////////////////////////////////////////////////////
	sf::Vector2f* GetBottomLeftPoint() const;

	////////////////////////////////////////////////////////////
	/// \brief Получить указатель на нижнюю правую точку.
	///
	////////////////////////////////////////////////////////////
	sf::Vector2f* GetBottomRightPoint() const;

	////////////////////////////////////////////////////////////
	/// \brief Получить флаги объекта.
	///
	////////////////////////////////////////////////////////////
	uint16_t GetFlags() const;

	sf::VertexArray* GetVertexArray() const;

	sf::Texture* GetTexture() const;
};

